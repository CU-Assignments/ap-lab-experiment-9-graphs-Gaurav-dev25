class Solution {
public:
    vector<pair<int,int>> direction = {{1,0},{0,1},{-1,0},{0,-1}}; // 4 possible directions (down, right, up, left)
    int m, n;
    int memo[205][205]; // memo table
    int dfs(vector<vector<int>>& matrix, int r, int c) {
        if (memo[r][c] != 0) return memo[r][c]; // Return memoized result if already computed

        int tempAns = 1; // Minimum path length is 1 
        for (int i = 0; i < 4; i++) {
            int nr = r + direction[i].first;
            int nc = c + direction[i].second;
            // Move to the next cell only if it's inside bounds and has a strictly greater value
            if (nr >= 0 && nc >= 0 && nr < m && nc < n && matrix[nr][nc] > matrix[r][c]) {
                tempAns = max(tempAns, 1 + dfs(matrix, nr, nc)); // Update the path length
            }
        }

        return memo[r][c] = tempAns; // Memoize and return
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        m = matrix.size();
        n = matrix[0].size();
        int ans = 0;

        // Start DFS from every cell and find the maximum path
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans = max(ans, dfs(matrix, i, j));
            }
        }

        return ans;
    }
};
